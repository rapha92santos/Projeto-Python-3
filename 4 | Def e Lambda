# || Definir Funções || 
print("\n|| Def e Lambda ||\n")

print("Até o momento foi possível observar as estruturas que a linguaguem Python conseguem construir. Mas agora, vamos elencar e definir estas capacidades em 'def'. Pra esse próximo exemplo vamos organizar um festival com duração de 3 dias e ver a capacidade de lambda.")

# || Def ||
print("\n|| Def ||\n")

print("Vamos iniciar nosso festival definindo os custos e receitas da operação, pra no final termos uma visão estratégica do negócio. Com isso, vamos começar fazendo um 'def' com a organização do festival.\n")

print('def festival(dias):\n | custo_organização = 200 * dias\n | return custo_organização')

def festival(dias):
    custo_organização = 200 * dias
    return custo_organização

print("\nDefinimos aqui, que a casa de show tem um custo diário de 200 reais de organização, usamos o argumento de 'festival(dias)' entre parênteses para utilizar como entrada de dados no futuro.\n\nDando sequência, vamos definir a receita.\n")

def receita(dias):
    preço_ingresso = 10
    clientes = 100
    if dias == 3:
      preço_ingresso -= 10 * 0.5
    elif dias == 2:
      preço_ingresso -= 10 * 0.25      
    elif dias == 1:
      preço_ingresso == 10    
    return (clientes * preço_ingresso) * dias 

print("def receita(dias):\n | preço_ingresso = 10\n | clientes = 100\n | if dias == 3:\n || preço_ingresso -= 10 * 0.5\n | elif dias == 2:\n || preço_ingresso -= 10 * 0.25\n | elif dias == 1:\n || preço_ingresso == 10\n | return (clientes * preço_ingresso) * dias")

print("\nA receita é definida por capacidade de clientes e sendo o preço original do ingresso R$ 10 por dia. Porém, vamos adotar uma política especial de promoção para os clientes fieis que adquirirem os ingressos para os 3 dias de festival, sendo este desconto progressivo de 50% e 25% para os 3 ou 2 dias.\n")

print("'Receita(dias)' também fica em aberto, pois irá receber dados no futuro. A seguir, vamos definir o artista responsável pela atração de público, assim como o seu gênero musical.\n")

def artista(dias, gênero):
    if gênero == "Rock":
        gênero = 150
    elif gênero == "Sertanejo":
        gênero = 180
    elif gênero == "Pagode":
        gênero = 140
    elif gênero == "Eletrônica":
        gênero = 190    
    return gênero * dias

print("def artista(dias, gênero):\n | if gênero == 'Rock':\n || gênero = 150\n | elif gênero == 'Sertanejo':\n || gênero = 180\n | elif gênero == 'Pagode':\n || gênero = 140\n | elif gênero == 'Eletrônica':\n || gênero = 190\n | return gênero * dias")

print("\nFica, portanto, definido que cada gênero artístico tem um valor único de cache. Deixando o 'artista(dias, gênero)' entre parentêses para utilizar como entrada de dados no futuro.")

print("\nPor fim, vamos consolidar todos os dados em uma última 'def' chamada balanço pra ver a viabilidade do negócio.")

print("\ndef balanço(dias,gênero):\n | return receita(dias) - artista(dias, gênero) - festival(dias)")

def balanço(dias, gênero):
    return receita(dias) - artista(dias, gênero) - festival(dias)

print("\nRecentemente, a casa de show vendeu todos seus ingressos para um único artista de sertanejo nos 3 dias de evento do festival, sendo assim a organização vai ter um 'def balanço(dias, gênero)' estabelecida.")

print("\nA conta da função 'def' fica:\n\nReceita: Ingressos com 50% de desconto = R$ 10 * 0,5 = R$ 5 * 3 dias = R$ 15 * 100 clientes = R$. 1.500\nArtista: R$ 180 * 3 dias = - R$ 540\nFestival: R$ 200 * 3 dias = - R$ 600")

print("\nPortanto, quando definimos todos os custos e receitas estamos na realidade associando o conteúdo de uma função com a outra e dando sequência de loops dentro delas por prioridades, além de relacionar todo o conteúdo para um objetivo comum.\n")

print("O resultado final fica por conta do 'balanço(3 dias,'Sertanejo'):\n\nReceita (R$ 1.500) - Artista (R$ 540) - Festival (R$ 600) = R$", int(balanço(3,"Sertanejo")))

# || Lambda || 
print("\n|| Lambda ||\n")

print("Lambda faz parte do alfabeto grego e um símbolo matemático utilizado na ciência de computação, sua função em Python é diversa, ela serve tanto para filtrar pesquisas ou usada em expressões matemáticas.\n")

Conta = lambda x,y,z: x + y + z

print("Lambda pode ser usada para definir expressões matemáticas onde x = 1, y = 2, z = 3 como, 'lambda x,y,z: x + y + z' =", int(Conta(1, 2, 3)))

Lambda = ["Gregos", "Troianos", "Persas", "Minóicos"]

print("\nE já que falamos dos gregos, vamos criar uma lista chamada Lambda =", Lambda ,"com algumas das civilizações antigas e filtrar nesta lista utilizando a função lambda apenas os gregos criadores da letra.\n","\nlist(filter(lambda x:x == 'Gregos', Lambda) =" , list(filter(lambda x:x == "Gregos", Lambda)))

print("\nÉ possível ainda utilizar o 'map' para mapear mais de uma lista.")

Conta1 = [1, 2, 3]
Conta2 = [4, 5, 6]
Conta3 = [0, -1, -2]

Resultado = list(map(lambda x,y,z: x+y+z, Conta1,Conta2,Conta3))            

print("\nConta1 = [1,2,3]\nConta2 = [4,5,6]\nConta3 = [0,-1,-2]\n\nlist(map(lambda x,y,z: x+y+z, Conta1, Conta2, Conta3) =", Resultado)

print("\nDentre uma das formas mais utilizadas do 'lambda' é a função anônima, onde utiliza-se o 'def' para retornar 'lambda', como:\n")

def gorjeta(y):
    return lambda x:x * y

serviço = gorjeta(0.1)

print("def gorjeta(y):\n | return lambda x:x * y\n\nserviço = gorjeta(0.1)\n\nSe neste serviço tivessemos o total de R$ 50, portanto a gorjeta seria 10% = R$", int(serviço(50)))

print("\nIsto finaliza o tópico 'def' e lambda, para o próximo assunto vamos explorar 'array' e metódo de listas.")
