print("\n|| Numpy ||\n")

print("Nesse tópico vamos falar sobre numpy, utilizando em paralelo a metodologia do curso da W3schools. Como primeiro passo vamos instalar o pacote numpy através do python pelo console usando o PIP pelo caminho: 'pip install numpy'. Feito isso, vamos providenciar a importação do pacote Numpy como se vê a seguir:\n")

#Console
#C:\Usuário\Nome>pip install numpy

print("import numpy\nprint(numpy.__version__)\n")

import numpy

print(numpy.__version__)

print("\nPara facilitar a utilização do pacote Numpy e não sobrecarregar o código com mais informação que o necessário, utiliza-se em python o atalho de 'np' para designar o pacote ou qualquer outro nome que o usuário definir, fazendo portanto uma referência ao numpy por meio do 'as' como pode-se ver:\n")

print("import numpy as np\nteste = np.array([1, 'abc', 2*5, 10 > 2])\n")

import numpy as np

teste = np.array([1,"abc",2*5,10>2])

print(teste)

print("\n|| Camadas ||\n")

print("O numpy organiza as informações em 'arrays', possuindo características semelhantes as encontradas em Python como, por exemplo, em métodos de lista. Mas, o que diferencia o Numpy dos demais é sua capacidade de organização unidimensional em camadas sendo verificado pelo comando '.ndim', '.shape', '.reshape':\n")

print("camada = np.array(1)\ncamada1 = np.array(['abc'])\ncamada2 = np.array([[2*5],[10/2]])\ncamada3 = np.array([[[10>2], [10>5 or 5>10], [camada1 is 'abc']]])\n")

camada = np.array(1)
camada1 = np.array(["abc"])
camada2 = np.array([[2*5], [10/2]])
camada3 = np.array([[[10>2], [10 > 5 or 5 > 10],[camada1 is "abc"]]])

print("camadas individuais:\ncamada.ndim\ncamada1.ndim\ncamada2.ndim\ncamada3.ndim")
print(camada.ndim)
print(camada1.ndim)
print(camada2.ndim)
print(camada3.ndim)

print("\nnumpy = np.array([1,2,3,4,5,6,7,8,9,10], ndmin=5)")
numpy = np.array([1,2,3,4,5,6,7,8,9,10], ndmin=5)

print('\nLista:',numpy)
print('\nnúmero de camadas:', numpy.ndim)
print('número de formatos:', numpy.shape)
print('reformatado em 5 camadas de duplas:\n', numpy.reshape(5,2))

print("\n|| Data Types ||\n")

print("Outro aspecto diferente do Numpy é a conversão dos tipos de dados dessas camadas, usando os comandos 'astype()', 'dtype=' em conjunto com a organização das camadas como 'nditer()' e 'ndenumerate()'. Mas, antes de produzir modificações no código vamos fazer um backup semelhante ao comando encontrado em Python utilizando '.copy()':\n")

print("decimal = np.array([0.5, 10.5, 20.5])\nbackup = decimal.copy()\n")
decimal = np.array([0.5, 10.5, 20.5])
backup = decimal.copy()
print('tipo de dados:',decimal.dtype)
print('backup decimal:',backup,'\n')

print("conv_int = decimal.astype('int')")
conv_int = decimal.astype('int')
print('conversão em integer:',conv_int,'\n')

print("conv_bool = conv_int.astype('bool')")
conv_bool = conv_int.astype('bool')
print('conversão em boolean:',conv_bool,'\n')

print("conv_string = conv_bool.astype(dtype='S')")
conv_string = conv_bool.astype(dtype='S')
print('conversão em string:',conv_string)

print("\nfor iter_enum in np.nditer(decimal[::3]):\n | for iter_enum in np.ndenumerate(decimal):\n || print(iter_enum)")
print('\nIteração e enumeração do array:')
for iter_enum in np.nditer(decimal[::3]):
  for iter_enum in np.ndenumerate(decimal):
   print(iter_enum)

print("\nPara efeturar a conversão nos tipos de dados, podemos fazer de duas formas pelo padrão python: 'strings', 'interger', 'float', 'boolean', 'complex' ou então utilizando o comando 'dtype' que pode ser dividios em:\n")

print("* i - integer\n* b - boolean\n* u - unsigned integer\n* f - float\n* c - complex float\n* m - timedelta\n* M - datetime\n* O - object\n* S - string\n* U - unicode string\n* V - fixed chunk of memory for other type ( void )\n\nFonte:W3schools")

print("\n|| Estrutura e Ordenamento Numpy ||\n")

print("A seguir, vamos estruturar as camadas com os comandos '.concatenate()' e ver as variações de '.stack()' e 'axis=':\n")

#concatenate
print("titulo = np.array(['ID','Nome'])\ntitulo1 = np.array(['Departamento','Turno'])\ncamadas = np.concatenate([titulo,titulo1])\n")
titulo = np.array(['ID','Nome'])
titulo1 = np.array(['Departamento','Turno'])
camadas = np.concatenate([titulo,titulo1])
print('concatenate entre títulos:',camadas)

#vstack
print("\ndata = np.array([1,'João','Diretoria','Vespertino'])\nmatriz = np.vstack((camadas,data))")
data = np.array([1,'João','Diretoria','Vespertino'])
matriz = np.vstack((camadas,data))
print('\ntabela matriz vstack:\n',matriz)

#hstack
print("\nconta = np.array([2*6/3])\nconta1 = np.array([5*10/2])\nequacao = np.hstack((conta+conta1))")
conta = np.array([2*6/3])
conta1 = np.array([5*10/2])
equacao = np.hstack((conta+conta1))
print('\nequação hstack: (2*6/3)+(5*10/2) =',int(equacao))

#dstack
print("\ncampos = np.array(['ID','Nome:','Departamento:','Turno:'])\ndados = np.array([1,'João','Diretoria','Vespertino'])\ncadastro = np.dstack((campos, dados))")
campos = np.array(['ID','Nome:','Departamento:','Turno:'])
dados = np.array([1,'João','Diretoria','Vespertino'])
cadastro = np.dstack((campos, dados))
print('\ncampo de cadastro dstack:\n',cadastro)

#axis
print("\nnum_tel = np.array([['+55'], ['011']])\nnum_tel1 = np.array([['0123'], ['4567']])\ntelefone = np.concatenate((num_tel, num_tel1), axis=0)")
num_tel = np.array([['+55'], ['011']])
num_tel1 = np.array([['0123'], ['4567']])
telefone = np.concatenate((num_tel, num_tel1), axis=0)
telefone1 = np.concatenate((num_tel, num_tel1), axis=1)
print('\nnúmero de telefone com axis=0:\n',telefone)

print("\ntelefone1 = np.concatenate((num_tel, num_tel1), axis=1)")

print('\nnúmero de telefone com axis=1:\n',telefone1)

print("Os comandos vistos aqui estruturam a união de camadas das listas de diversas formas, porém é necessário tomar cuidado ao usar esses comandos, visto que é necessário as listas serem do mesmo tamanho e formato, caso contrário o python retorna com erro de sintaxe. E da mesma forma que podemos unir, temos a opção de separar com o uso do comando 'split()':\n")

#split
print("separar = np.array_split(camadas, 2)\n")
separar = np.array_split(camadas, 2)
print('split concatenate de títulos:\n',separar)

#vsplit
print("\nsepara_vstack = np.vsplit(matriz, 2)")
separa_vstack = np.vsplit(matriz, 2)
print('\nvsplit separa vstack:\n',separa_vstack)

#hsplit
print("\nequacao1 = np.hstack((conta,conta1))\nsepara_hstack = np.hsplit(equacao1, 2)")
equacao1 = np.hstack((conta,conta1))
separa_hstack = np.hsplit(equacao1, 2)
print('\nhsplit separa hstack: (2*6/3)+(5*10/2) =',separa_hstack)

#dsplit
print("\nsepara_dstack = np.dsplit(cadastro, 2)")
separa_dstack = np.dsplit(cadastro, 2)
print('\ndsplit separa dstack:\n',separa_dstack)

#split index
print("\nsepara_index = np.array_split(telefone1, 2)")
separa_index = np.array_split(telefone1, 2)
print('\nsplit índice 0:',separa_index[0])
print('split índice 1:',separa_index[1])

print("\nOs 'splits' são a antítese dos 'stacks' e executados os comandos praticamente da mesma forma, trocando apenas sua respectiva nomenclatura. Com isso, podemos avançar para as buscas e ordenamento de lista em numpy:\n")

print("lojas = np.array(['Loja_A', 'Loja_B', 'Loja_C','Loja_C','Loja_D','Loja_E'])\nnovas_lojas = np.array(['Loja_C','Loja_A','Loja_E'])\nvendas = np.array([25,40,50,75,80,100])\nnovas_vendas = np.array([10,30,15])\n")
lojas = np.array(['Loja_A', 'Loja_B', 'Loja_C','Loja_C','Loja_D','Loja_E'])
novas_lojas = np.array(['Loja_C','Loja_A','Loja_E'])
vendas = np.array([25,40,50,75,80,100])
novas_vendas = np.array([10,30,15])
print('lojas:',lojas)
print('vendas:',vendas)
print('\nnovas lojas:',novas_lojas)
print('novas vendas:',novas_vendas)

print('\nencontre o index da Loja_C:',np.where(lojas == 'Loja_C'))
print('encontre o index do resultado 100:',np.searchsorted(vendas, 100))
print('ordenamento index das novas vendas na lista vendas:',np.searchsorted(vendas, novas_vendas))
print('criar e organizar lista com novas lojas:',np.sort(np.concatenate([lojas,novas_lojas])))
print('criar e organizar lista com novas vendas:',np.sort(np.concatenate([vendas,novas_vendas])))

print("\nCom o uso do '.where()' e '.searchsorted()' podemos buscar dentro das listas dados que estamos procurando, no exemplo, podemos encontrar o index dentro da lista das lojas e suas respectivvas vendas. Além disso, é possível consultar e organizar os índices de inclusão das novas vendas e lojas.\n\nÉ preciso, todavia, tomar cuidado também com o uso dos comandos, visto que é necessário seguir um ordenamento padrão do numpy, por exemplo, seguir ordem de crescimento e alfabético. Como pode se ver no caso das novas lojas não estarem vinculadas com seus resultados de novas vendas, seguindo porém, o padrão de ordenamento numpy. Tendo esse problema em mente, vamos tentar mitigar com o próximo código:\n")

#tabela vinculada
print("lista_loja_vinculada = np.array(['Loja_A', 'Loja_A', 'Loja_B', 'Loja_C', 'Loja_C', 'Loja_C', 'Loja_D', 'Loja_E', 'Loja_E'])\nlista_venda_vinculada = np.array([25, 30, 40, 10, 50, 75, 80, 15, 100])\ntabela_vinculada = np.dstack((lista_loja_vinculada,lista_venda_vinculada))\n")
lista_loja_vinculada = np.array(['Loja_A', 'Loja_A', 'Loja_B', 'Loja_C', 'Loja_C', 'Loja_C', 'Loja_D', 'Loja_E', 'Loja_E'])
lista_venda_vinculada = np.array([25, 30, 40, 10, 50, 75, 80, 15, 100])
tabela_vinculada = np.dstack((lista_loja_vinculada,lista_venda_vinculada))
print('tabela vinculada:\n',tabela_vinculada)

#tabela numpy.sort
print("\nlista_novas_lojas = np.array(['Loja_A', 'Loja_A', 'Loja_B', 'Loja_C', 'Loja_C', 'Loja_C', 'Loja_D', 'Loja_E', 'Loja_E'])\nlista_novas_vendas = np.array([10, 15, 25, 30, 40, 50, 75, 80, 100])\ntabela_sort = np.dstack((lista_novas_lojas,lista_novas_vendas))")
lista_novas_lojas = np.array(['Loja_A', 'Loja_A', 'Loja_B', 'Loja_C', 'Loja_C', 'Loja_C', 'Loja_D', 'Loja_E', 'Loja_E'])
lista_novas_vendas = np.array([10, 15, 25, 30, 40, 50, 75, 80, 100])
tabela_sort = np.dstack((lista_novas_lojas,lista_novas_vendas))
print('\ntabela numpy.sort:\n',tabela_sort)

#Filtro de compatibilidade manual
print("\nfiltro = lista_novas_lojas[[False, False, False, False, False, True, False, False, True]]\nfiltro1 = lista_novas_vendas[[False, False, False, False, False, True, False, False, True]]\ntabela_filtrada = np.dstack((filtro,filtro1))")
filtro = lista_novas_lojas[[False, False, False, False, False, True, False, False, True]]
filtro1 = lista_novas_vendas[[False, False, False, False, False, True, False, False, True]]
tabela_filtrada = np.dstack((filtro,filtro1))
print('\nfiltragem de compatibilidade manual:\n',tabela_filtrada)

#Filtro de compatibilidade automático
print("\nfiltro_auto = tabela_vinculada == tabela_sort\ncomparativo = tabela_vinculada[filtro_auto]")
filtro_auto = tabela_vinculada == tabela_sort
comparativo = tabela_vinculada[filtro_auto]
print('\nfiltro de compatibilidade automático:\n',filtro_auto)
print('\nvalores compatíveis:\n', comparativo)

print("\nTentando minimizar o problema da ordenação e vinculação, é possível em numpy utilizar os filtros para identificar e corrigir tanto manualmente quanto automaticamente os valores compatíveis ou não. Com isso, fizemos um filtro manual que identificou dois valores compatíveis com ordenamento numpy, porém assumindo critérios pessoais, como posição, para identificar valores. Logo, quando usamos o filtro automático ele percorre sob a totalidade da lista, identificando tudo e qualquer valor.")

print("\n|| Random ||\n")

print("Random vai trazer uma importante ferramenta em numpy para promover nossos estudos futuros com base de dados, onde separarmos os dados em dois grupos distintos de população e testagem. População é o grupo responsável pela realização do estudo, já a testagem vai servir para comprovação dos resultados. Pra isso, vamos dar sequência acrescentando ao numpy uma base de dados através do panda e os:\n")

print("import panda as pd\nimport os\ncaminho = os.path.dirname(os.path.realpath(__file__))\narquivo = 'Estados.xls'\nEstados = pd.read_excel(os.path.join(caminho, arquivo))\n")

import pandas as pd
import os
caminho = os.path.dirname(os.path.realpath(__file__))
arquivo = 'Estados.xls'
Estados = pd.read_excel(os.path.join(caminho, arquivo))
print(Estados)

print("\nCom a importação da base de dados, vamos trabalhar ela separando os ID's entre os dois grupos mencionados de população e testagem. Pra isso, vamos também importar o 'random' e além disso, utilizar uma 'seed' para determinar um cenário fixo de parâmetro da nossa experiência.\n")

print("import random as rnd\nrnd.seed(123)\n")

import random as rnd
rnd.seed(123)

#ID
print("ID = Estados['ID']\nID_lista = list(ID)")
ID = Estados["ID"]
ID_lista = list(ID)

#população
print("\npop = int(len(ID_lista) * 0.75)")
pop = int(len(ID_lista) * 0.75)
print('população de 75% dos dados =',pop)

#testagem
print("\ntestagem = int(len(ID_lista) - pop)")
testagem = int(len(ID_lista) - pop)
print('testagem de 25% dos dados =',testagem)

#População random.sample sem repetição
print("\nrandomico = rnd.sample(ID_lista, pop)")
randomico = rnd.sample(ID_lista, pop)
print('\npopulação de dados:\n',np.sort(randomico))

#Regra de comparação: (população - ID) = testagem
print("\ncompara_lista = []\nfor num in ID_lista:\n | if num not in randomico:\n || compara_lista.append(num)") 
compara_lista = []

for num in ID_lista:
  if num not in randomico:
    compara_lista.append(num)

print('\ndados de testagem:\n', np.sort(compara_lista))

print("\nVimos aqui o uso do ID para seleção na base de dados do grupo de população usando os recursos da 'random.sample()' que escolhe os números aleatoriamente sem repetição e ambiguidades. Também fizemos uma lista de testagem, comparando os dados já selecionados na população em relação aos existentes da base de dados, aqueles que sobraram ficam valendo como a lista de testagem.")

print("\nCom isso concluímos o tópico de numpy, essa importante ferramenta disponível em python. Espero ter conseguido passar um pouco de conhecimento e os vejo em uma próxima oportunidade.")
